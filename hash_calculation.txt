#ifndef COMM_SERVO_H
#define COMM_SERVO_H

// [Previous includes...]

/* State Tracking */
extern int rest_called;  // Global flag to track if rest() was called
extern unsigned long execution_sequence; // Tracks order of function calls

/* [Rest of header...] */
#endif



------------------------------------------------------------------------
// Global state variables
int rest_called = 0;
unsigned long execution_sequence = 0;

// Updated rest() function
void rest() {
    softPwmWrite(BASE_SERVO_PIN, 0);
    printf("Executed: rest position\n");
    delay(1000);
    rest_called = 1;
    execution_sequence++;
}

// Updated calculate_program_hash()
char *calculate_program_hash() {
    size_t opcode_length = 28; // Should match actual function size
    unsigned char *current_hash = NULL;
    unsigned int hash_length = 0;
    
    // Always include these core functions
    void (*functions[])(void) = {spin_ninety, spin_oneeighty};
    int num_functions = 2;

    // Create a unique execution context buffer
    unsigned char context[32];
    snprintf((char*)context, sizeof(context), "SEQ:%lu:REST:%d", 
             execution_sequence, rest_called);

    // Hash the execution context first
    current_hash = compute_sha256(context, strlen((char*)context), &hash_length);
    
    // Then hash each function's opcode
    for (int i = 0; i < num_functions; i++) {
        unsigned char *opcode = get_opcode((void*)functions[i], opcode_length);
        if (!opcode) {
            fprintf(stderr, "Failed to get opcode for function %d\n", i);
            free(current_hash);
            return NULL;
        }

        unsigned char *combined = malloc(hash_length + opcode_length);
        memcpy(combined, current_hash, hash_length);
        memcpy(combined + hash_length, opcode, opcode_length);
        free(current_hash);
        free(opcode);
        
        current_hash = compute_sha256(combined, hash_length + opcode_length, &hash_length);
        free(combined);
    }

    // If rest was called, include its opcode
    if (rest_called) {
        unsigned char *rest_opcode = get_opcode((void*)rest, opcode_length);
        if (rest_opcode) {
            unsigned char *combined = malloc(hash_length + opcode_length);
            memcpy(combined, current_hash, hash_length);
            memcpy(combined + hash_length, rest_opcode, opcode_length);
            free(current_hash);
            free(rest_opcode);
            
            current_hash = compute_sha256(combined, hash_length + opcode_length, &hash_length);
            free(combined);
        }
    }

    // Convert to hex string
    char *hash_str = malloc(hash_length * 2 + 1);
    for (size_t i = 0; i < hash_length; i++) {
        sprintf(&hash_str[i*2], "%02x", current_hash[i]);
    }
    hash_str[hash_length * 2] = '\0';
    free(current_hash);

    return hash_str;
}

// Updated comm_send_command()
int comm_send_command(const char *command) {
    // Calculate fresh dynamic hash
    char *current_hash = calculate_program_hash();
    if (!current_hash || comm_send_hash(current_hash, 0) != 0) {
        if (current_hash) free(current_hash);
        return -1;
    }

    // Execute command
    if (strcmp(command, "spin ninety") == 0) {
        spin_ninety();
        execution_sequence++;
    } else if (strcmp(command, "spin oneeighty") == 0) {
        spin_oneeighty();
        execution_sequence++;
    } else if (strcmp(command, "rest") == 0) {
        rest(); // This increments execution_sequence and sets rest_called
    }

    free(current_hash);
    return 0;
}

------------------------------------------------------------------------------
void comm_init(const char *hostname, int port) {
    // Reset state tracking
    rest_called = 0;
    execution_sequence = 0;
    
    // [Rest of your existing initialization code...]
    
    // Calculate initial hash (before any commands execute)
    char *initial_hash = calculate_program_hash();
    if (!initial_hash || comm_send_hash(initial_hash, 1) != 0) {
        fprintf(stderr, "Initial hash verification failed\n");
        if (initial_hash) free(initial_hash);
        exit(EXIT_FAILURE);
    }
    free(initial_hash);
}
